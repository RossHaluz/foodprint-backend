generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Language {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String
  code      String
}

enum TypeCategory {
  main
  subcategory
}

model Category {
  id        String            @id @default(uuid())
  products  ProductCategory[] @relation("ProductToCategory")
  name      String
  type      TypeCategory      @default(main)
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt
  parentId  String?
  parent    Category?         @relation("ParentToCategory", fields: [parentId], references: [id], onDelete: Cascade)
  children  Category[]        @relation("ParentToCategory")
  position  Int?              @default(1)

  @@index([parentId])
}

enum ProductType {
  main
  additional
}

model ProductCategory {
  id         String   @id @default(uuid())
  productId  String
  categoryId String
  product    Product  @relation("ProductToCategory", fields: [productId], references: [id], onDelete: Cascade)
  category   Category @relation("ProductToCategory", fields: [categoryId], references: [id], onDelete: Cascade)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([productId, categoryId])
}

model Product {
  id                     String                  @id @default(uuid())
  categories             ProductCategory[]       @relation("ProductToCategory")
  title                  String
  description            String
  quantity               Int                     @default(0)
  price                  Int                     @default(0)
  type                   ProductType             @default(main)
  isArchived             Boolean                 @default(false)
  backgroundColor        String                  @default("")
  textColor              String                  @default("")
  position               Int                     @default(1)
  images                 Image[]                 @relation("ProductToImage")
  orderItems             OrderItem[]
  createdAt              DateTime                @default(now())
  updatedAt              DateTime                @updatedAt
  article                String
  productCharacteristics ProductCharacteristic[] @relation("ProductCharacteristicToProduct")
  translations           ProductTranslation[]    @relation("ProductTranslationToProduct")
}

model ProductTranslation {
  id           String   @id @default(uuid())
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  languageCode String
  title        String
  description  String
  productId    String   @unique
  product      Product  @relation("ProductTranslationToProduct", fields: [productId], references: [id], onDelete: Cascade)

  @@index([productId])
}

model Image {
  id        String   @id @default(uuid())
  productId String
  product   Product  @relation("ProductToImage", fields: [productId], references: [id], onDelete: Cascade)
  url       String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([productId])
}

enum OrderTypes {
  new
  pending
  success
  reject
}

model Order {
  id             String      @id @default(uuid())
  isPaid         Boolean     @default(false)
  firstName      String      @default("")
  lastName       String      @default("")
  phone          String      @default("")
  email          String      @default("")
  orderNumber    String      @default("")
  message        String      @default("")
  messagngerType String      @default("")
  messenger      String      @default("")
  totalPrice     Int         @default(0)
  orderStatus    OrderTypes  @default(new)
  orderItems     OrderItem[] @relation("OrderItems")
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
  userId         String
  user           User        @relation("OrderToUser", fields: [userId], references: [id])

  @@index([userId])
}

model OrderItem {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  price     Int      @default(0)
  orderId   String
  order     Order    @relation("OrderItems", fields: [orderId], references: [id], onDelete: Cascade)
  productId String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  quantity  Int      @default(1)

  @@unique([productId, orderId])
  @@index([productId, orderId])
}

model Characteristic {
  id                     String                      @id @default(uuid())
  createdAt              DateTime                    @default(now())
  updatedAt              DateTime                    @updatedAt
  name                   String                      @default("")
  description            String?                     @default("")
  productCharacteristics ProductCharacteristic[]     @relation("CharacteristicToProductCharacteristic")
  translations           CharacteristicTranslation[] @relation("TranslationToCharacteristic")
}

model CharacteristicTranslation {
  id               String         @id @default(uuid())
  createAt         DateTime       @default(now())
  updateAt         DateTime       @updatedAt
  languageCode     String
  name             String
  characteristicId String
  characteristic   Characteristic @relation("TranslationToCharacteristic", fields: [characteristicId], references: [id], onDelete: Cascade)

  @@index([characteristicId])
}

model ProductCharacteristic {
  id               String                             @id @default(uuid())
  productId        String
  product          Product                            @relation("ProductCharacteristicToProduct", fields: [productId], references: [id], onDelete: Cascade)
  characteristicId String
  name             String
  characteristic   Characteristic                     @relation("CharacteristicToProductCharacteristic", fields: [characteristicId], references: [id], onDelete: Cascade)
  translations     ProductCharacteristicTranslation[] @relation("ProductCharacteristicToTranslation")
  createAt         DateTime                           @default(now())
  updateAt         DateTime                           @updatedAt

  @@unique([productId, characteristicId])
  @@index([characteristicId, productId])
}

model ProductCharacteristicTranslation {
  id                      String                @id @default(uuid())
  createdAt               DateTime              @default(now())
  updatedAt               DateTime              @updatedAt
  languageCode            String
  description             String
  productCharacteristicId String
  productCharacteristic   ProductCharacteristic @relation("ProductCharacteristicToTranslation", fields: [productCharacteristicId], references: [id], onDelete: Cascade)

  @@unique([productCharacteristicId, languageCode])
  @@index([productCharacteristicId])
}

model User {
  id          String   @id @default(uuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  firstName   String   @default("")
  lastName    String   @default("")
  email       String   @default("")
  phoneNumber String   @default("")
  address     String   @default("")
  avatar      String   @default("")
  role        String   @default("user")
  password    String   @default("")
  orders      Order[]  @relation("OrderToUser")
}

model Review {
  id          String              @id @default(uuid())
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt
  photo       ReviewPhoto[]       @relation("ReviewPhotoToReview")
  desc        String
  avtor       String
  translation ReviewTranslation[] @relation("ReviewTranslationToReview")
}

model ReviewPhoto {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  url       String
  reviewId  String
  review    Review   @relation("ReviewPhotoToReview", fields: [reviewId], references: [id], onDelete: Cascade)

  @@index([reviewId])
}

model ReviewTranslation {
  id           String   @id @default(uuid())
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  desc         String
  languageCode String
  reviewId     String
  review       Review   @relation("ReviewTranslationToReview", fields: [reviewId], references: [id], onDelete: Cascade)

  @@index([reviewId])
}

model Feedback {
  id             String   @id @default(uuid())
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  firstName      String
  email          String
  messenger      String
  messagngerType String
  message        String
}

model DeliveryInfo {
  id          String                    @id @default(uuid())
  createdAt   DateTime                  @default(now())
  updatedAt   DateTime                  @updatedAt
  description String
  translation DeliveryInfoTranslation[]
}

model DeliveryInfoTranslation {
  id           String       @id @default(uuid())
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  description  String
  languageCode String       @unique
  deliveryId   String
  deliveryInfo DeliveryInfo @relation(fields: [deliveryId], references: [id], onDelete: Cascade)

  @@index([deliveryId])
}

model PaymentMethod {
  id          String                     @id @default(uuid())
  createdAt   DateTime                   @default(now())
  updatedAt   DateTime                   @updatedAt
  description String
  translation PaymentMethodTranslation[]
}

model PaymentMethodTranslation {
  id              String        @id @default(uuid())
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  description     String
  languageCode    String        @unique
  paymentMethodId String
  paymentMethod   PaymentMethod @relation(fields: [paymentMethodId], references: [id], onDelete: Cascade)

  @@index([paymentMethodId])
}

model FAQ {
  id           String           @id @default(uuid())
  createdAt    DateTime         @default(now())
  updateAt     DateTime         @updatedAt
  question     String
  answer       String
  translations FAQTranslation[]
}

model FAQTranslation {
  id           String   @id @default(uuid())
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  question     String
  answer       String
  languageCode String   @unique
  faqId        String
  faq          FAQ      @relation(fields: [faqId], references: [id], onDelete: Cascade)

  @@index([faqId])
}
